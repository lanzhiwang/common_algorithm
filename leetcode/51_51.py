#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
51. N 皇后
n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。



上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。


示例：

输入：4
输出：[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。


提示：

皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。

(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)
(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)
(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7)
(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7)
(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7)
(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7)
(6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7)
(7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7)


* (4, 3) row, column
(3, 2) row-1, column-1
(3, 3) row-1, column
(3, 4) row-1, column+1
(4, 2) row, column-1
(4, 3) row, column
(4, 4) row, column+1
(5, 2) row+1, column-1
(5, 3) row+1, column
(5, 4) row+1, column+1

solve_n_queen(row=0, column=[], slash=[])
    [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]

    (0, 0) -> [(0, 0), (0, 1), (1, 0), (1, 1)]
    solve_n_queen(row=1, column=[0], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])

    (0, 1) -> [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]
    solve_n_queen(row=1, column=[1], slash=[])

    (0, 2)
    solve_n_queen(row=1, column=[2], slash=[])

    (0, 3)
    solve_n_queen(row=1, column=[3], slash=[])

    (0, 4)
    solve_n_queen(row=1, column=[4], slash=[])

    (0, 5)
    solve_n_queen(row=1, column=[5], slash=[])

    (0, 6)
    solve_n_queen(row=1, column=[6], slash=[])

    (0, 7)
    solve_n_queen(row=1, column=[7], slash=[])

solve_n_queen(row=1, column=[0], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])
    [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)]

    (1, 2) -> [(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]
    solve_n_queen(row=2, column=[0, 2], slash=[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)])

    (1, 3)
    (1, 4)
    (1, 5)
    (1, 6)
    (1, 7)

solve_n_queen(row=2, column=[0, 2], slash=[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)])
    [(2, 4), (2, 5), (2, 6), (2, 7)

    (2, 4) -> [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]
    solve_n_queen(row=3, column=[0, 2, 4], slash=[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)])

    (2, 5)
    (2, 6)
    (2, 7)

solve_n_queen(row=3, column=[0, 2, 4], slash=[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)])
    [(3, 1), (3, 6), (3, 7)]

    (3, 1) -> [(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2)]
    solve_n_queen(row=4, column=[0, 2, 4, 1], slash=[(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2)])

    (3, 6)
    (3, 7)

solve_n_queen(row=4, column=[0, 2, 4, 1], slash=[(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2)])
    [(4, 3), (4, 5), (4, 6), (4, 7)]

    (4, 3) -> [(3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4), (5, 2), (5, 3), (5, 4)]
    solve_n_queen(row=5, column=[0, 2, 4, 1, 3], slash=[(3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4), (5, 2), (5, 3), (5, 4)])

    (4, 5)
    (4, 6)
    (4, 7)

solve_n_queen(row=5, column=[0, 2, 4, 1, 3], slash=[(3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4), (5, 2), (5, 3), (5, 4)])
    [(5, 5), (5, 6), (5, 7)]

    (5, 5) -> [(4, 4), (4, 5), (4, 6), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6)]
    solve_n_queen(row=6, column=[0, 2, 4, 1, 3, 5], slash=[(4, 4), (4, 5), (4, 6), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6)])

    (5, 6)

    (5, 7)

solve_n_queen(row=6, column=[0, 2, 4, 1, 3, 5], slash=[(4, 4), (4, 5), (4, 6), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6)])
    [(6, 7)]

    (6, 7) -> [(5, 6), (5, 7), (6, 6), (6, 7), (7, 6), (7, 7)]
    solve_n_queen(row=7, column=[0, 2, 4, 1, 3, 5, 7], slash=[(5, 6), (5, 7), (6, 6), (6, 7), (7, 6), (7, 7)])

solve_n_queen(row=7, column=[0, 2, 4, 1, 3, 5, 7], slash=[(5, 6), (5, 7), (6, 6), (6, 7), (7, 6), (7, 7)])
    []

#########################################################

solve_n_queen(row=0, column=[], slash=[])
    [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]

    (0, 0) -> [(0, 0), (0, 1), (1, 0), (1, 1)]
    solve_n_queen(row=1, column=[0], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])

    (0, 1) -> [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]
    solve_n_queen(row=1, column=[1], slash=[])

    (0, 2)
    solve_n_queen(row=1, column=[2], slash=[])

    (0, 3) -> [(0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4)]
    solve_n_queen(row=1, column=[3], slash=[(0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4)])
    return [(0, 3), (1, 6), (2, 2), (3, 7), (4, 1), (5, 4), (6, 0), (7, 5)]

    (0, 4)
    solve_n_queen(row=1, column=[4], slash=[])

    (0, 5)
    solve_n_queen(row=1, column=[5], slash=[])

    (0, 6)
    solve_n_queen(row=1, column=[6], slash=[])

    (0, 7)
    solve_n_queen(row=1, column=[7], slash=[])

solve_n_queen(row=1, column=[3], slash=[(0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4)])
    [(1, 0), (1, 1), (1, 5), (1, 6), (1, 7)]

    (1, 6) -> [(0, 5), (0, 6), (0, 7), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 7)]
    solve_n_queen(row=2, column=[3, 6], slash=[(0, 5), (0, 6), (0, 7), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 7)])
    return [(1, 6), (2, 2), (3, 7), (4, 1), (5, 4), (6, 0), (7, 5)]

solve_n_queen(row=2, column=[3, 6], slash=[(0, 5), (0, 6), (0, 7), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 7)])
    [(2, 0), (2, 1), (2, 2), (2, 4)]

    (2, 2) -> [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
    solve_n_queen(row=3, column=[3, 6, 2], slash=[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)])
    return [(2, 2), (3, 7), (4, 1), (5, 4), (6, 0), (7, 5)]

solve_n_queen(row=3, column=[3, 6, 2], slash=[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)])
    [(3, 0), (3, 4), (3, 5), (3, 7)]

    (3, 7) -> [(2, 6), (2, 7), (3, 6), (3, 7), (4, 6), (4, 7)]
    solve_n_queen(row=4, column=[3, 6, 2, 7], slash=[(2, 6), (2, 7), (3, 6), (3, 7), (4, 6), (4, 7)])
    return [(3, 7), (4, 1), (5, 4), (6, 0), (7, 5)]

solve_n_queen(row=4, column=[3, 6, 2, 7], slash=[(2, 6), (2, 7), (3, 6), (3, 7), (4, 6), (4, 7)])
    [(4, 0), (4, 1), (4, 4), (4, 5)]

    (4, 1) -> [(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)]
    solve_n_queen(row=5, column=[3, 6, 2, 7, 1], slash=[(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)])
    return [(4, 1), (5, 4), (6, 0), (7, 5)]

solve_n_queen(row=5, column=[3, 6, 2, 7, 1], slash=[(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)])
    [(5, 4), (5, 5)]

    (5, 4) -> [(4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5), (6, 3), (6, 4), (6, 5)]
    solve_n_queen(row=6, column=[3, 6, 2, 7, 1, 4], slash=[(4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5), (6, 3), (6, 4), (6, 5)])  return [(6, 0), (7, 5)]
    return [(5, 4), (6, 0), (7, 5)]

solve_n_queen(row=6, column=[3, 6, 2, 7, 1, 4], slash=[(4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5), (6, 3), (6, 4), (6, 5)])
    [(6, 0)]

    (6, 0) -> [(5, 0), (5, 1), (6, 0), (6, 1), (7, 0), (7, 1)]
    solve_n_queen(row=7, column=[3, 6, 2, 7, 1, 4, 0], slash=[(5, 0), (5, 1), (6, 0), (6, 1), (7, 0), (7, 1)])  return [(7, 5)]
    return [(6, 0), (7, 5)]
    [[(6, 0), (7, 5)], [(6, 0), (7, 5)]]

solve_n_queen(row=7, column=[3, 6, 2, 7, 1, 4, 0], slash=[(5, 0), (5, 1), (6, 0), (6, 1), (7, 0), (7, 1)])
    [(7, 5)]
    return [(7, 5)]
    [[(7, 5)], [(7, 5)]]
"""

def func(t):
    temp = []
    for m in [(t[0]-1, t[1]-1), (t[0]-1, t[1]), (t[0]-1, t[1]+1), (t[0], t[1]-1), (t[0], t[1]), (t[0], t[1]+1), (t[0]+1, t[1]-1), (t[0]+1, t[1]), (t[0]+1, t[1]+1)]:
        if m[0] >= 0 and m[0] <= 8-1 and m[1] >= 0 and m[1] <= 8-1:
            temp.append(m)
    return temp


class Solution(object):
    def solve_n_queen(self, row=0, column=[], slash=[], count=0):
        possible_location = []
        for i in range(count):
            possible_location.append((row, i))

        for i in column:
            slash.append((row, i))

        result_location = list(set(possible_location).difference(set(slash)))
        if row < count - 1 and not result_location:
            return []
        elif row == count - 1 and not result_location:
            return []

        if row == count - 1 and result_location:
            return [result_location]

        result = []
        for t in result_location:
            temp = []
            for m in [(t[0]-1, t[1]-1), (t[0]-1, t[1]), (t[0]-1, t[1]+1), (t[0], t[1]-1), (t[0], t[1]), (t[0], t[1]+1), (t[0]+1, t[1]-1), (t[0]+1, t[1]), (t[0]+1, t[1]+1)]:
                if m[0] >= 0 and m[0] <= count-1 and m[1] >= 0 and m[1] <= count-1:
                    temp.append(m)
            column.append(t[1])
            for l in self.solve_n_queen(row+1, column, temp, count):
                l.insert(0, t)
                result.append(l)
        return result

    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        if n in [0, 2, 3]:
            return []
        return self.solve_n_queen(row=0, column=[], slash=[], count=8)



print(Solution().solveNQueens(8))


"""
(0, 0), (0, 1), (0, 2), (0, 3)
(1, 0), (1, 1), (1, 2), (1, 3)
(2, 0), (2, 1), (2, 2), (2, 3)
(3, 0), (3, 1), (3, 2), (3, 3)

solve_n_queen(row=0, column=[], slash=[])
    (0, 0), (0, 1), (0, 2), (0, 3)

    (0, 0)
    solve_n_queen(row=1 column=[0], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])

    (0, 1)
    solve_n_queen(row=1 column=[1], slash=[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])

    (0, 2)
    solve_n_queen(row=1 column=[2], slash=[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3)])



solve_n_queen(row=1 column=[0], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])
    (1, 2), (1, 3)

    (1, 2)
    solve_n_queen(row=2 column=[0, 2], slash=[(0, 0), (0, 1), (1, 0), (1, 1)])

solve_n_queen(row=1 column=[1], slash=[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])
    (1, 3)
    solve_n_queen(row=2 column=[1, 3], slash=[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])

solve_n_queen(row=1 column=[2], slash=[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3)])
    (1, 0)
    solve_n_queen(row=2 column=[2, 0], slash=[(0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3)])




"""


